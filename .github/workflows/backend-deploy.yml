name: Backend Build and Deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths:
      - 'apps/backend/**'
      - 'terraform/modules/backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: swashflag-backend
  TF_VERSION: 1.5.0

jobs:
  # Determine environment
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set-env.outputs.env_name }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "env_name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "env_name=prod" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
          else
            echo "env_name=dev" >> $GITHUB_OUTPUT
          fi

  # Call shared workflow to generate terraform variables
  terraform-vars:
    needs: set-environment
    uses: ./.github/workflows/shared-terraform-variables.yml
    with:
      environment: ${{ needs.set-environment.outputs.env_name }}
    secrets: inherit

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: set-environment
    outputs:
      image_uri: ${{ steps.set-image-uri.outputs.image_uri }}
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Set image tags
        id: set-image-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "image_tag=${VERSION}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "image_tag=staging-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Set image URI
        id: set-image-uri
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          echo "image_uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ steps.set-image-tag.outputs.image_tag }}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./apps/backend
          push: true
          tags: ${{ steps.set-image-uri.outputs.image_uri }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy infrastructure with Terraform
  terraform:
    needs: [build, terraform-vars, set-environment]
    runs-on: ubuntu-latest
    if: needs.terraform-vars.outputs.terraform_vars_set == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download terraform.tfvars
        uses: actions/download-artifact@v4
        with:
          name: terraform-vars-${{ needs.set-environment.outputs.env_name }}
          path: terraform/environments/${{ needs.set-environment.outputs.env_name }}

      - name: Update backend_image in tfvars
        run: |
          cd terraform/environments/${{ needs.set-environment.outputs.env_name }}
          sed -i '/backend_image/d' terraform.tfvars
          echo 'backend_image = "${{ needs.build.outputs.image_uri }}"' >> terraform.tfvars
          grep 'backend_image' terraform.tfvars

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ needs.set-environment.outputs.env_name }}
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/${{ needs.set-environment.outputs.env_name }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cd terraform/environments/${{ needs.set-environment.outputs.env_name }}
          terraform apply -auto-approve tfplan