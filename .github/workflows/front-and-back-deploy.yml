name: Deploy Swashflag

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install PNPM
      uses: pnpm/action-setup@v3
      with:
        version: 8
        run_install: false

    - name: Get PNPM store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      name: Setup PNPM cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    # Get EC2 public DNS from instance ID
    - name: Get EC2 Public DNS and IP
      id: ec2-info
      run: |
        # Get instance information
        INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --output json)

        # Extract public DNS and IP
        EC2_PUBLIC_DNS=$(echo "$INSTANCE_INFO" | jq -r '.Reservations[0].Instances[0].PublicDnsName')
        EC2_PUBLIC_IP=$(echo "$INSTANCE_INFO" | jq -r '.Reservations[0].Instances[0].PublicIpAddress')

        # Print for debugging
        echo "Retrieved EC2 Public IP: $EC2_PUBLIC_IP"
        echo "Retrieved EC2 Public DNS: $EC2_PUBLIC_DNS"

        # Set environment variables
        echo "EC2_PUBLIC_DNS=$EC2_PUBLIC_DNS" >> $GITHUB_ENV
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        echo "BACKEND_API_URL=http://$EC2_PUBLIC_DNS:3000" >> $GITHUB_ENV

    - name: Install dependencies
      run: pnpm install

    - name: Build Frontend
      run: |
        cd apps/frontend
        # Set NODE_OPTIONS to enable the experimental fetch option needed for Vite
        export NODE_OPTIONS="--experimental-fetch"
        VITE_API_URL='${{ env.BACKEND_API_URL }}' pnpm run build

    - name: Deploy Frontend to S3
      run: |
        aws s3 sync apps/frontend/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront
      run: |
        # Attempt to invalidate CloudFront distribution if the ID is provided
        # This will silently fail if the ID is not set
        if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        else
          echo "CloudFront distribution ID not provided, skipping invalidation"
        fi
      env:
        CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    - name: Build Backend
      run: |
        cd apps/backend
        pnpm install --no-frozen-lockfile
        pnpm run build

    - name: Deploy Backend to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        # Debug information
        echo "Using EC2 IP: ${{ env.EC2_PUBLIC_IP }}"

        # Save private key to file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Test SSH connection
        echo "Testing SSH connection..."
        ssh -v -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} 'echo "SSH Connection Successful"'

        # Proceed with deployment if SSH test was successful
        echo "Creating deployment package..."
        cd apps/backend
        zip -r ../../backend.zip . -x "node_modules/*" -x ".git/*"
        cd ../..

        echo "Uploading deployment package..."
        scp -o StrictHostKeyChecking=no -i private_key.pem backend.zip ec2-user@${{ env.EC2_PUBLIC_IP }}:/home/ec2-user/

        echo "Running deployment commands on server..."
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} '
          # Install Node.js if not already installed
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            source ~/.nvm/nvm.sh
            nvm install 18
            nvm use 18
          fi

          # Verify Node.js installation
          node --version
          npm --version

          # Install PM2 if not already installed
          npm install -g pm2

          # Deploy the application
          cd /home/ec2-user && 
          unzip -o backend.zip -d app && 
          cd app && 
          echo "NODE_ENV=production" > .env && 
          echo "PORT=3000" >> .env && 
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" >> .env && 
          echo "ENCRYPTION_KEY=\"${{ secrets.ENCRYPTION_KEY }}\"" >> .env && 
          echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> .env && 
          echo "CLIENT_URL=${{ secrets.CLOUDFRONT_URL }}" >> .env && 
          npm install --production &&
          pm2 restart swashflag || pm2 start npm --name "swashflag" -- start'

        # Clean up
        rm -f private_key.pem
