name: Deploy Swashflag

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    # Get EC2 public DNS from instance ID
    - name: Get EC2 Public DNS
      id: ec2-dns
      run: |
        EC2_PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].PublicDnsName" --output text)
        EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "EC2_PUBLIC_DNS=$EC2_PUBLIC_DNS" >> $GITHUB_ENV
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        echo "BACKEND_API_URL=http://$EC2_PUBLIC_DNS:3000" >> $GITHUB_ENV

    - name: Build Frontend
      run: |
        cd apps/frontend
        npm install
        # Set NODE_OPTIONS to enable the experimental fetch option needed for Vite
        export NODE_OPTIONS="--experimental-fetch"
        VITE_API_URL='${{ env.BACKEND_API_URL }}' npm run build

    - name: Deploy Frontend to S3
      run: |
        aws s3 sync apps/frontend/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront
      run: |
        # Attempt to invalidate CloudFront distribution if the ID is provided
        # This will silently fail if the ID is not set
        if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        else
          echo "CloudFront distribution ID not provided, skipping invalidation"
        fi
      env:
        CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    - name: Build Backend
      run: |
        cd apps/backend
        npm install
    
    - name: Deploy Backend to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        cd apps/backend
        zip -r ../../backend.zip .
        scp -o StrictHostKeyChecking=no -i ../../private_key.pem ../../backend.zip ec2-user@${{ env.EC2_PUBLIC_IP }}:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no -i ../../private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} '
          cd /home/ec2-user && 
          unzip -o backend.zip -d app && 
          cd app && 
          echo "NODE_ENV=production" > .env && 
          echo "PORT=3000" >> .env && 
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" >> .env && 
          echo "ENCRYPTION_KEY=\"${{ secrets.ENCRYPTION_KEY }}\"" >> .env && 
          echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> .env && 
          echo "CLIENT_URL=${{ secrets.CLOUDFRONT_URL }}" >> .env && 
          npm install && 
          pm2 restart all || pm2 start npm --name "swashflag" -- start'
        rm -f ../../private_key.pem 