name: Frontend Build and Deploy

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths:
      - 'apps/frontend/**'
      - 'terraform/modules/frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.5.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'
          cache-dependency-path: 'apps/frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd apps/frontend
          pnpm install

      - name: Build frontend
        run: |
          cd apps/frontend
          pnpm run build

      - name: Set environment name
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "ENV_NAME=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "ENV_NAME=staging" >> $GITHUB_ENV
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload build artifacts
        run: |
          aws s3 sync apps/frontend/build/ s3://swashflag-${{ env.ENV_NAME }}-frontend/ --delete

      - name: Invalidate CloudFront cache
        if: env.ENV_NAME == 'prod' || env.ENV_NAME == 'staging'
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Aliases.Items, 'swashflag.com') || contains(Aliases.Items, 'staging.swashflag.com')].Id" --output text)
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          fi

  terraform:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment name
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "ENV_NAME=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "ENV_NAME=staging" >> $GITHUB_ENV
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ env.ENV_NAME }}
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/${{ env.ENV_NAME }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cd terraform/environments/${{ env.ENV_NAME }}
          terraform apply -auto-approve tfplan